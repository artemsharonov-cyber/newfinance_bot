import os
import psycopg2
from psycopg2 import pool
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import Application, CommandHandler, CallbackContext, CallbackQueryHandler, MessageHandler, Filters

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è PostgreSQL
DATABASE_URL = os.getenv('DATABASE_URL')
db_pool = psycopg2.pool.SimpleConnectionPool(1, 20, DATABASE_URL)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ë–î
def init_db():
    conn = db_pool.getconn()
    cursor = conn.cursor()
    cursor.execute('''
        CREATE TABLE IF NOT EXISTS transactions (
            user_id BIGINT,
            type TEXT,
            amount REAL,
            category TEXT,
            date TIMESTAMP DEFAULT CURRENT_TIMESTAMP
        )
    ''')
    cursor.execute('''
        CREATE TABLE IF NOT EXISTS feedback (
            user_id BIGINT,
            message TEXT,
            date TIMESTAMP DEFAULT CURRENT_TIMESTAMP
        )
    ''')
    conn.commit()
    db_pool.putconn(conn)

init_db()

# –¢–æ–∫–µ–Ω –±–æ—Ç–∞
TOKEN = os.getenv('TELEGRAM_TOKEN')

# –ö–∞—Ç–µ–≥–æ—Ä–∏–∏ –¥–ª—è –∫–Ω–æ–ø–æ–∫
CATEGORIES_EXPENSE = ['–ï–¥–∞', '–¢—Ä–∞–Ω—Å–ø–æ—Ä—Ç', '–†–∞–∑–≤–ª–µ—á–µ–Ω–∏—è', '–ñ–∏–ª—å–µ', '–î—Ä—É–≥–æ–µ']
CATEGORIES_INCOME = ['–ó–∞—Ä–ø–ª–∞—Ç–∞', '–§—Ä–∏–ª–∞–Ω—Å', '–ü–æ–¥–∞—Ä–∫–∏', '–î—Ä—É–≥–æ–µ']

# –ö–æ–º–∞–Ω–¥–∞ /start
async def start(update: Update, context: CallbackContext):
    user_id = update.message.from_user.id
    await update.message.reply_text(
        f'–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –¥–ª—è —Ç—Ä–µ–∫–∏–Ω–≥–∞ —Ñ–∏–Ω–∞–Ω—Å–æ–≤.\n'
        f'–î–æ–±–∞–≤–ª—è–π —Ç—Ä–∞—Ç—ã: /add_expense —Å—É–º–º–∞\n'
        f'–î–æ–±–∞–≤–ª—è–π –¥–æ—Ö–æ–¥—ã: /add_income —Å—É–º–º–∞\n'
        f'–°–º–æ—Ç—Ä–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É: /stats\n'
        f'–û—Å—Ç–∞–≤—å –æ—Ç–∑—ã–≤: /feedback\n'
        f'–ü–æ–¥–µ–ª–∏—Å—å –º–Ω–æ–π —Å –¥—Ä—É–∑—å—è–º–∏! üòä'
    )

# –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ä–∞—Å—Ö–æ–¥–∞
async def add_expense(update: Update, context: CallbackContext):
    try:
        amount = float(context.args[0])
        context.user_data['amount'] = amount
        context.user_data['type'] = 'expense'
        
        keyboard = [[InlineKeyboardButton(cat, callback_data=cat) for cat in CATEGORIES_EXPENSE[i:i+2]] 
                   for i in range(0, len(CATEGORIES_EXPENSE), 2)]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await update.message.reply_text(f'–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –¥–ª—è —Ä–∞—Å—Ö–æ–¥–∞ {amount}:', reply_markup=reply_markup)
    except:
        await update.message.reply_text('–ò—Å–ø–æ–ª—å–∑—É–π: /add_expense —Å—É–º–º–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä, /add_expense 500)')

# –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –¥–æ—Ö–æ–¥–∞
async def add_income(update: Update, context: CallbackContext):
    try:
        amount = float(context.args[0])
        context.user_data['amount'] = amount
        context.user_data['type'] = 'income'
        
        keyboard = [[InlineKeyboardButton(cat, callback_data=cat) for cat in CATEGORIES_INCOME[i:i+2]] 
                   for i in range(0, len(CATEGORIES_INCOME), 2)]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await update.message.reply_text(f'–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –¥–ª—è –¥–æ—Ö–æ–¥–∞ {amount}:', reply_markup=reply_markup)
    except:
        await update.message.reply_text('–ò—Å–ø–æ–ª—å–∑—É–π: /add_income —Å—É–º–º–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä, /add_income 10000)')

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
async def button_callback(update: Update, context: CallbackContext):
    query = update.callback_query
    await query.answer()
    
    category = query.data
    amount = context.user_data.get('amount')
    trans_type = context.user_data.get('type')
    user_id = query.from_user.id
    
    if amount and trans_type:
        conn = db_pool.getconn()
        cursor = conn.cursor()
        cursor.execute('INSERT INTO transactions (user_id, type, amount, category) VALUES (%s, %s, %s, %s)',
                       (user_id, trans_type, amount, category))
        conn.commit()
        db_pool.putconn(conn)
        
        await query.edit_message_text(text=f'{trans_type.capitalize()} {amount} –≤ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ "{category}" –¥–æ–±–∞–≤–ª–µ–Ω.')
        context.user_data.clear()
    else:
        await query.edit_message_text(text='–û—à–∏–±–∫–∞: –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –∑–∞–Ω–æ–≤–æ.')

# –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
async def stats(update: Update, context: CallbackContext):
    user_id = update.message.from_user.id
    conn = db_pool.getconn()
    cursor = conn.cursor()
    
    cursor.execute('SELECT SUM(amount) FROM transactions WHERE user_id = %s AND type = %s', (user_id, 'income'))
    total_income = cursor.fetchone()[0] or 0
    cursor.execute('SELECT SUM(amount) FROM transactions WHERE user_id = %s AND type = %s', (user_id, 'expense'))
    total_expense = cursor.fetchone()[0] or 0
    balance = total_income - total_expense
    
    cursor.execute('SELECT category, SUM(amount) FROM transactions WHERE user_id = %s AND type = %s GROUP BY category', 
                   (user_id, 'expense'))
    categories = cursor.fetchall()
    
    reply = f'üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:\n–ë–∞–ª–∞–Ω—Å: {balance}\n–î–æ—Ö–æ–¥—ã: {total_income}\n–†–∞—Å—Ö–æ–¥—ã: {total_expense}\n\n–†–∞—Å—Ö–æ–¥—ã –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º:'
    for cat, amt in categories:
        reply += f'\n{cat}: {amt}'
    if not categories:
        reply += '\n–ü–æ–∫–∞ –Ω–µ—Ç —Ä–∞—Å—Ö–æ–¥–æ–≤.'
    
    db_pool.putconn(conn)
    await update.message.reply_text(reply)

# –û—Ç–∑—ã–≤
async def feedback(update: Update, context: CallbackContext):
    await update.message.reply_text('–ù–∞–ø–∏—à–∏—Ç–µ –≤–∞—à –æ—Ç–∑—ã–≤ –∏–ª–∏ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ, –∏ —è –ø–µ—Ä–µ–¥–∞–º –µ–≥–æ —Å–æ–∑–¥–∞—Ç–µ–ª—é!')
    context.user_data['feedback_mode'] = True

# –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π (–¥–ª—è –æ—Ç–∑—ã–≤–æ–≤)
async def handle_message(update: Update, context: CallbackContext):
    if context.user_data.get('feedback_mode'):
        user_id = update.message.from_user.id
        message = update.message.text
        
        conn = db_pool.getconn()
        cursor = conn.cursor()
        cursor.execute('INSERT INTO feedback (user_id, message) VALUES (%s, %s)', (user_id, message))
        conn.commit()
        db_pool.putconn(conn)
        
        await update.message.reply_text('–°–ø–∞—Å–∏–±–æ –∑–∞ –æ—Ç–∑—ã–≤! –û–Ω –ø–µ—Ä–µ–¥–∞–Ω —Å–æ–∑–¥–∞—Ç–µ–ª—é.')
        context.user_data['feedback_mode'] = False
        # –û—Ç–ø—Ä–∞–≤–∫–∞ –æ—Ç–∑—ã–≤–∞ —Ç–µ–±–µ (–∑–∞–º–µ–Ω–∏ YOUR_CHAT_ID –Ω–∞ —Ç–≤–æ–π Telegram ID)
        await context.bot.send_message(chat_id='YOUR_CHAT_ID', text=f'–û—Ç–∑—ã–≤ –æ—Ç {user_id}: {message}')
    else:
        await update.message.reply_text('–ò—Å–ø–æ–ª—å–∑—É–π –∫–æ–º–∞–Ω–¥—ã: /start, /add_expense, /add_income, /stats, /feedback')

# –ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
def main():
    application = Application.builder().token(TOKEN).build()
    
    application.add_handler(CommandHandler('start', start))
    application.add_handler(CommandHandler('add_expense', add_expense))
    application.add_handler(CommandHandler('add_income', add_income))
    application.add_handler(CommandHandler('stats', stats))
    application.add_handler(CommandHandler('feedback', feedback))
    application.add_handler(CallbackQueryHandler(button_callback))
    application.add_handler(MessageHandler(Filters.text & ~Filters.command, handle_message))
    
    import asyncio
    async def set_webhook():
        webhook_url = f"https://{os.getenv('RENDER_EXTERNAL_HOSTNAME')}/webhook"
        await application.bot.set_webhook(webhook_url)
    
    asyncio.run(set_webhook())
    
    application.run_polling()

if __name__ == '__main__':
    main()
